datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Transaction pooler (pgBouncer)
  directUrl = env("DIRECT_URL") // Session pooler (for migrate locks)
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CANDIDATE
  EMPLOYER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate CandidateProfile?
  company   Company?
}

model CandidateProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  fullName String
  headline String?
  bio      String?
  location String?
  cpf      String? @unique
  phone    String?
  address  String?

  skills       CandidateSkill[]
  resumes      Json?
  applications Application[]
  certificates Certificate[]

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // <-- ADICIONE ESSE DEFAULT
}

model Certificate {
  id          String           @id @default(cuid())
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])

  name     String
  issuer   String?
  issuedAt DateTime?
  url      String?

  createdAt DateTime @default(now())
}

model Company {
  id       String  @id @default(cuid())
  userId   String  @unique
  name     String
  website  String?
  about    String?
  location String?
  jobs     Job[]
  user     User    @relation(fields: [userId], references: [id])
}

model Job {
  id           String        @id @default(cuid())
  companyId    String
  title        String
  description  String
  location     String?
  employment   String? // full-time, part-time, remoto, etc.
  requirements JobSkill[]
  createdAt    DateTime      @default(now())
  applications Application[]
  company      Company       @relation(fields: [companyId], references: [id])
}

model Application {
  id          String           @id @default(cuid())
  jobId       String
  candidateId String
  status      String           @default("SUBMITTED") // SUBMITTED | REVIEW | INTERVIEW | OFFER | REJECTED
  createdAt   DateTime         @default(now())
  job         Job              @relation(fields: [jobId], references: [id])
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
}

model Skill {
  id   String @id @default(cuid())
  name String @unique

  // lados opostos das relações:
  candidateSkills CandidateSkill[] @relation("SkillCandidateSkills")
  jobSkills       JobSkill[]       @relation("SkillJobSkills")
}

model CandidateSkill {
  candidateId String
  skillId     String
  level       Int?

  candidate CandidateProfile @relation(fields: [candidateId], references: [id])
  skill     Skill            @relation("SkillCandidateSkills", fields: [skillId], references: [id])

  @@id([candidateId, skillId])
}

model JobSkill {
  jobId   String
  skillId String
  must    Boolean @default(true)

  job   Job   @relation(fields: [jobId], references: [id])
  skill Skill @relation("SkillJobSkills", fields: [skillId], references: [id])

  @@id([jobId, skillId])
}
